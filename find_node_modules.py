#!/usr/local/bin/python3

import os
import argparse
from datetime import datetime, timedelta
import time
import shutil
from typing import List

def end_timer(start_time: float):
    end_time = time.time()
    elapsed_time = end_time - start_time
    print(f"Finished in {elapsed_time:.2f} seconds.")

def get_directory_size(directory: str) -> int:
    """Calculate the size of a directory in bytes."""
    total_size = 0
    for dirpath, _, filenames in os.walk(directory):
        for f in filenames:
            fp = os.path.join(dirpath, f)
            # Skip if it's a broken symbolic link
            if os.path.isfile(fp):
                total_size += os.path.getsize(fp)
    return total_size

def get_directory_size_mb(directory: str) -> float:
    return get_directory_size(directory) / (1024 * 1024)

def is_older_than(directory: str, months: int) -> int:
    """Check if the directory was last modified more than the specified number of months ago."""
    cutoff_date = datetime.now() - timedelta(days=months * 30)  # Approximate each month as 30 days
    dir_mod_time = datetime.fromtimestamp(os.path.getmtime(directory))
    return dir_mod_time < cutoff_date

def find_node_modules_directories(start_dir: str, min_size: int, min_age: int) -> (List[str], int):
    nm_directories = []
    count = 0
    for root, dirs, files in os.walk(start_dir):
        if 'node_modules' in dirs:
            nm_path = os.path.join(root, 'node_modules')
            if is_older_than(nm_path, min_age) and get_directory_size_mb(nm_path) >= min_size:
                print(nm_path)
                nm_directories.append(nm_path)
                count += 1
            # Remove 'node_modules' from dirs to skip walking into them
            dirs.remove('node_modules')
    return nm_directories, count

def prompt(s: str):
    confirm = input(f"{s} [y/N]: ").strip().lower()
    return confirm == 'y'

def prompt_deletion(directories):
    """Prompt user to delete each directory found."""
    for directory in directories:
        if prompt(f"Do you want to delete '{directory}'?"):
            try:
                shutil.rmtree(directory)
                print(f"Deleted: {directory}")
            except Exception as e:
                print(f"Failed to delete '{directory}': {e}")
        else:
            print(f"Skipped: {directory}")

if __name__ == "__main__":
    start_time = time.time()

    parser = argparse.ArgumentParser(description="Find all node_modules directories starting from the specified directory.")
    parser.add_argument("search_directory", type=str, help="The directory to start searching from")
    parser.add_argument("--size", type=int, default=100, help="Size threshold in MB (default is 100MB)")
    parser.add_argument("--months", type=int, default=6, help="Age threshold in months (default is 6 months)")
    
    args = parser.parse_args()
    search_directory = args.search_directory
    size_threshold_mb = args.size
    age_threshold_months = args.months
    
    dirs, count = find_node_modules_directories(search_directory, size_threshold_mb, age_threshold_months)

    print()
    if count > 0:
        print(f"⬆️ Found {count} node_modules directories greater than {size_threshold_mb}MB in size and older than {age_threshold_months} months.")
        print()
        end_timer(start_time)
        if prompt("Do you want to delete the directories?"):
            prompt_deletion(dirs)
        else:
            print("Skipping...")
    else:
        print("No node_modules directories found.")
        end_timer(start_time)